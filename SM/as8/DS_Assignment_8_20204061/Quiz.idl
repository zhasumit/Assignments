/* 
 * This module defines the data structure for the quiz game and the interface
 * for the server.
 */
module Quiz {

	/*
	 * Data structure defining a answer for a question.
	 */
	valuetype Answer {
		public char id;
		public string sentence;
	};

	/*
	 * Data structure defining a question with an id, sentence and multiple
	 * answers.
	 */
	valuetype Question {
        typedef sequence<Answer> AnswerSeq;
		public long id;
		public string sentence;
		public AnswerSeq answers;
	};
	
	/*
	 * Data structure defining a complete question. It extends the question
	 * structure by adding (multiple) correct answers.
	 */
	valuetype CompleteQuestion : Question {
		/* Type definition of a char sequence. */
        typedef sequence<char> CharSeq;
		public CharSeq correctAnswers;
	};

	/*
	 * Interface for the quiz server object. This interface provides all
	 * methods, that can used by clients to play the game.
	 */
	interface QuizServer {
	
		/*
		 * Exception type that can be generated by the quiz server object.
		 */
		exception QuizException {
        	        string message;
    	        };

		/* Type definition of a char sequence for the answers */
		typedef sequence<char> answersIds;
	
		/*
		 * Returns a random question to the client. Note: return just a
		 * question without the correct answers, that means return no
		 * complete question.
		 */
		boolean getQuestion(out Question randomQuestion) 
			raises (QuizException);

		/*
		 * Method for creating a new question on the server object. The
		 * CompleteQuestion object is created on the client and sent to the
		 * server by using this method. The server saves this question.
		 *
		 * The method returns the ID of the create question.
		 */
		long insertQuestion(in CompleteQuestion question) 
			raises (QuizException);
	
		/*
		 * Method for answering a question with a given question ID. The server
		 * will check the answers and return true or false. The correct answers
		 * should be written in the out correct parameters.
		 */
		boolean answerQuestion(in long questionId, in answersIds answer, out answersIds correct) 
			raises (QuizException);
	
		/*
		 * Deletes the question with the given ID.
		 */
		long deleteQuestion(in long questionId) 
			raises (QuizException);
 
	};
	
};
